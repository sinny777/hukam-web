{"ast":null,"code":"import { InjectionToken, Injectable, Inject, Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy, NgModule, defineInjectable, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst DISQUS_SHORTNAME = new InjectionToken('DISQUS_SHORTNAME');\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\nclass DisqusService {\n  /**\r\n   * @param {?} shortname\r\n   * @param {?} _document\r\n   */\n  constructor(shortname, _document) {\n    this.shortname = shortname;\n    this._document = _document;\n  }\n  /**\r\n   * @return {?}\r\n   */\n  get DISQUS() {\n    return this._document.defaultView.DISQUS;\n  }\n  /**\r\n   * @return {?}\r\n   */\n  get disqus_config() {\n    return this._document.defaultView.disqus_config;\n  }\n  /**\r\n   * @param {?} config\r\n   * @return {?}\r\n   */\n  set disqus_config(config) {\n    this._document.defaultView.disqus_config = config;\n  }\n}\nDisqusService.ɵfac = function DisqusService_Factory(t) {\n  return new (t || DisqusService)(ɵngcc0.ɵɵinject(DISQUS_SHORTNAME), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nDisqusService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: DisqusService,\n  factory: DisqusService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */DisqusService.ngInjectableDef = defineInjectable({\n  factory: function DisqusService_Factory() {\n    return new DisqusService(inject(DISQUS_SHORTNAME), inject(DOCUMENT));\n  },\n  token: DisqusService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\nlet DisqusComponent = /*#__PURE__*/(() => {\n  class DisqusComponent {\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} el\r\n     * @param {?} dService\r\n     */\n    constructor(renderer, el, dService) {\n      this.renderer = renderer;\n      this.el = el;\n      this.dService = dService;\n      /**\r\n       * DISQUS events\r\n       */\n      this.newComment = new EventEmitter(true);\n      this.ready = new EventEmitter(true);\n      this.paginate = new EventEmitter(true);\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnChanges() {\n      /** Reset Disqus if any input changed */\n      if (!this.dService.DISQUS) {\n        this.addDisqusScript();\n      } else {\n        this.reset();\n      }\n    }\n    /**\r\n     * Add DISQUS script\r\n     * @return {?}\r\n     */\n    addDisqusScript() {\n      /** Set DISQUS config */\n      this.dService.disqus_config = this.getConfig();\n      /** @type {?} */\n      const disqusScript = this.renderer.createElement('script');\n      disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;\n      disqusScript.async = true;\n      disqusScript.type = 'text/javascript';\n      this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());\n      this.renderer.appendChild(this.el.nativeElement, disqusScript);\n    }\n    /**\r\n     * Reset DISQUS with the new config\r\n     * @return {?}\r\n     */\n    reset() {\n      this.dService.DISQUS.reset({\n        reload: true,\n        config: this.getConfig()\n      });\n    }\n    /**\r\n     * Create DISQUS config from the inputs\r\n     * @return {?}\r\n     */\n    getConfig() {\n      /** @type {?} */\n      const self = this;\n      return function () {\n        this.page.identifier = self.identifier;\n        this.page.url = self.validateUrl(self.url);\n        this.page.title = self.title;\n        this.category_id = self.category;\n        this.language = self.language;\n        /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */\n        this.callbacks.onNewComment = [e => {\n          self.newComment.emit(e);\n        }];\n        this.callbacks.onReady = [e => {\n          self.ready.emit(e);\n        }];\n        this.callbacks.onPaginate = [e => {\n          self.paginate.emit(e);\n        }];\n      };\n    }\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\n    validateUrl(url) {\n      /** Validate URL input */\n      if (url) {\n        /** @type {?} */\n        const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n        if (r.test(url)) {\n          return url;\n        } else {\n          console.warn('[Disqus]: Invalid URL');\n        }\n      }\n      /** DISQUS will fallback to \"Window.location.href\" when URL is undefined */\n      return undefined;\n    }\n  }\n  DisqusComponent.ɵfac = function DisqusComponent_Factory(t) {\n    return new (t || DisqusComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DisqusService));\n  };\n  DisqusComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DisqusComponent,\n    selectors: [[\"disqus\"]],\n    inputs: {\n      url: \"url\",\n      identifier: \"identifier\",\n      title: \"title\",\n      category: \"category\",\n      language: \"language\"\n    },\n    outputs: {\n      newComment: \"newComment\",\n      ready: \"ready\",\n      paginate: \"paginate\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"disqus_thread\"]],\n    template: function DisqusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n  return DisqusComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\nlet DisqusModule = /*#__PURE__*/(() => {\n  class DisqusModule {\n    /**\r\n     * @param {?} shortname\r\n     * @return {?}\r\n     */\n    static forRoot(shortname) {\n      return {\n        ngModule: DisqusModule,\n        providers: [{\n          provide: DISQUS_SHORTNAME,\n          useValue: shortname\n        }]\n      };\n    }\n  }\n  DisqusModule.ɵfac = function DisqusModule_Factory(t) {\n    return new (t || DisqusModule)();\n  };\n  DisqusModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DisqusModule\n  });\n  DisqusModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return DisqusModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DisqusModule, {\n    declarations: [DisqusComponent],\n    exports: [DisqusComponent]\n  });\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\nexport { DisqusModule, DISQUS_SHORTNAME, DisqusService, DisqusComponent as ɵa };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRpc3F1cy5qcyIsInNvdXJjZXMiOlsibmd4LWRpc3F1cy9saWIvZGlzcXVzLm1vZGVsLnRzIiwibmd4LWRpc3F1cy9saWIvZGlzcXVzLnNlcnZpY2UudHMiLCJuZ3gtZGlzcXVzL2xpYi9kaXNxdXMuY29tcG9uZW50LnRzIiwibmd4LWRpc3F1cy9saWIvZGlzcXVzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsTUFBYSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBUyxrQkFBa0IsQ0FBQztBQUFFO0FBQ2hGO0FBQ0c7QUFDQztBQUlBO0FDVEosTUFPYSxhQUFhO0FBQzFCO0FBQ087QUFDTTtBQUE2QjtBQUN0QyxJQVVGLFlBQThDLFNBQWlCLEVBQTRCLFNBQWM7QUFDM0csUUFEZ0QsY0FBUyxHQUFULFNBQVMsQ0FBUTtBQUFFLFFBQTBCLGNBQVMsR0FBVCxTQUFTLENBQUs7QUFBRSxLQUMxRztBQUNIO0FBRUk7QUFBb0I7QUFBUyxJQWhCL0IsSUFBSSxNQUFNO0FBQU0sUUFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztBQUM3QyxLQUFHO0FBQ0g7QUFDTztBQUFvQjtBQUNyQixJQURKLElBQUksYUFBYTtBQUFNLFFBQ3JCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQ3BELEtBQUc7QUFDSDtBQUNPO0FBQTBCO0FBQ2hCO0FBQVMsSUFEeEIsSUFBSSxhQUFhLENBQUMsTUFBVztBQUMvQixRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDdEQsS0FBRztBQUNIOzJDQWhCQyxVQUFVLFNBQUMsbUJBQ1YsVUFBVSxFQUFFLE1BQU0sZUFDbkI7eUlBQ0k7QUFBRTtBQUFvQjtBQUdmLHlDQVdJLE1BQU0sU0FBQyxnQkFBZ0I7QUFBVSw0Q0FBbUIsTUFBTSxTQUFDLFFBQVE7QUFB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QSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFmQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBZUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQ3JCQSxBQW1CQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUVBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUdBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBN0ZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVpBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQVlBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFDL0JBLEFBUUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBWkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IERJU1FVU19TSE9SVE5BTUUgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignRElTUVVTX1NIT1JUTkFNRScpO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaXNxdXNDb21tZW50IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIG5hbWU6IHN0cmluZztcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIERpc3F1c1JlYWR5IHtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxufVxyXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBESVNRVVNfU0hPUlROQU1FIH0gZnJvbSAnLi9kaXNxdXMubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGlzcXVzU2VydmljZSB7XHJcblxyXG4gIGdldCBESVNRVVMoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlldy5ESVNRVVM7XHJcbiAgfVxyXG5cclxuICBnZXQgZGlzcXVzX2NvbmZpZygpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50LmRlZmF1bHRWaWV3LmRpc3F1c19jb25maWc7XHJcbiAgfVxyXG5cclxuICBzZXQgZGlzcXVzX2NvbmZpZyhjb25maWc6IGFueSkge1xyXG4gICAgdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcuZGlzcXVzX2NvbmZpZyA9IGNvbmZpZztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBASW5qZWN0KERJU1FVU19TSE9SVE5BTUUpIHB1YmxpYyBzaG9ydG5hbWU6IHN0cmluZywgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IGFueSkge1xyXG4gIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBSZW5kZXJlcjIsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGlzcXVzU2VydmljZSB9IGZyb20gJy4vZGlzcXVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEaXNxdXNDb21tZW50LCBEaXNxdXNSZWFkeSB9IGZyb20gJy4vZGlzcXVzLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZGlzcXVzJyxcclxuICB0ZW1wbGF0ZTogJzxkaXYgaWQ9XCJkaXNxdXNfdGhyZWFkXCI+PC9kaXY+JyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIERpc3F1c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIC8qKiBESVNRVVMgb3B0aW9ucyAqL1xyXG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGlkZW50aWZpZXI6IHN0cmluZztcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNhdGVnb3J5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbGFuZ3VhZ2U6IHN0cmluZztcclxuXHJcbiAgLyoqIERJU1FVUyBldmVudHMgKi9cclxuICBAT3V0cHV0KCkgbmV3Q29tbWVudCA9IG5ldyBFdmVudEVtaXR0ZXI8RGlzcXVzQ29tbWVudD4odHJ1ZSk7XHJcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxEaXNxdXNSZWFkeT4odHJ1ZSk7XHJcbiAgQE91dHB1dCgpIHBhZ2luYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KHRydWUpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgZFNlcnZpY2U6IERpc3F1c1NlcnZpY2UpIHtcclxuICAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcygpIHtcclxuICAgIC8qKiBSZXNldCBEaXNxdXMgaWYgYW55IGlucHV0IGNoYW5nZWQgKi9cclxuXHJcbiAgICBpZiAoIXRoaXMuZFNlcnZpY2UuRElTUVVTKSB7XHJcbiAgICAgIHRoaXMuYWRkRGlzcXVzU2NyaXB0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogQWRkIERJU1FVUyBzY3JpcHQgKi9cclxuICBhZGREaXNxdXNTY3JpcHQoKSB7XHJcblxyXG4gICAgLyoqIFNldCBESVNRVVMgY29uZmlnICovXHJcbiAgICB0aGlzLmRTZXJ2aWNlLmRpc3F1c19jb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xyXG5cclxuICAgIGNvbnN0IGRpc3F1c1NjcmlwdCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBkaXNxdXNTY3JpcHQuc3JjID0gYC8vJHt0aGlzLmRTZXJ2aWNlLnNob3J0bmFtZX0uZGlzcXVzLmNvbS9lbWJlZC5qc2A7XHJcbiAgICBkaXNxdXNTY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgZGlzcXVzU2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGRpc3F1c1NjcmlwdCwgJ2RhdGEtdGltZXN0YW1wJywgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZGlzcXVzU2NyaXB0KTtcclxuICB9XHJcblxyXG4gIC8qKiBSZXNldCBESVNRVVMgd2l0aCB0aGUgbmV3IGNvbmZpZyAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5kU2VydmljZS5ESVNRVVMucmVzZXQoe1xyXG4gICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgIGNvbmZpZzogdGhpcy5nZXRDb25maWcoKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQ3JlYXRlIERJU1FVUyBjb25maWcgZnJvbSB0aGUgaW5wdXRzICovXHJcbiAgZ2V0Q29uZmlnKCkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLnBhZ2UuaWRlbnRpZmllciA9IHNlbGYuaWRlbnRpZmllcjtcclxuICAgICAgdGhpcy5wYWdlLnVybCA9IHNlbGYudmFsaWRhdGVVcmwoc2VsZi51cmwpO1xyXG4gICAgICB0aGlzLnBhZ2UudGl0bGUgPSBzZWxmLnRpdGxlO1xyXG4gICAgICB0aGlzLmNhdGVnb3J5X2lkID0gc2VsZi5jYXRlZ29yeTtcclxuICAgICAgdGhpcy5sYW5ndWFnZSA9IHNlbGYubGFuZ3VhZ2U7XHJcblxyXG4gICAgICAvKiBBdmFpbGFibGUgY2FsbGJhY2tzIGFyZSBhZnRlclJlbmRlciwgb25Jbml0LCBvbk5ld0NvbW1lbnQsIG9uUGFnaW5hdGUsIG9uUmVhZHksIHByZURhdGEsIHByZUluaXQsIHByZVJlc2V0ICovXHJcbiAgICAgIHRoaXMuY2FsbGJhY2tzLm9uTmV3Q29tbWVudCA9IFsoZSkgPT4ge1xyXG4gICAgICAgIHNlbGYubmV3Q29tbWVudC5lbWl0KGUpO1xyXG4gICAgICB9XTtcclxuXHJcbiAgICAgIHRoaXMuY2FsbGJhY2tzLm9uUmVhZHkgPSBbKGUpID0+IHtcclxuICAgICAgICBzZWxmLnJlYWR5LmVtaXQoZSk7XHJcbiAgICAgIH1dO1xyXG5cclxuICAgICAgdGhpcy5jYWxsYmFja3Mub25QYWdpbmF0ZSA9IFsoZSkgPT4ge1xyXG4gICAgICAgIHNlbGYucGFnaW5hdGUuZW1pdChlKTtcclxuICAgICAgfV07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGVVcmwodXJsOiBzdHJpbmcpIHtcclxuICAgIC8qKiBWYWxpZGF0ZSBVUkwgaW5wdXQgKi9cclxuICAgIGlmICh1cmwpIHtcclxuICAgICAgY29uc3QgciA9IC8oaHR0cHxodHRwcyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcUyspKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8vO1xyXG5cclxuICAgICAgaWYgKHIudGVzdCh1cmwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1tEaXNxdXNdOiBJbnZhbGlkIFVSTCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiogRElTUVVTIHdpbGwgZmFsbGJhY2sgdG8gXCJXaW5kb3cubG9jYXRpb24uaHJlZlwiIHdoZW4gVVJMIGlzIHVuZGVmaW5lZCAqL1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERpc3F1c0NvbXBvbmVudCB9IGZyb20gJy4vZGlzcXVzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERJU1FVU19TSE9SVE5BTUUgfSBmcm9tICcuL2Rpc3F1cy5tb2RlbCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0Rpc3F1c0NvbXBvbmVudF0sXHJcbiAgZXhwb3J0czogW0Rpc3F1c0NvbXBvbmVudF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERpc3F1c01vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3Qoc2hvcnRuYW1lOiBzdHJpbmcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBEaXNxdXNNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogRElTUVVTX1NIT1JUTkFNRSwgdXNlVmFsdWU6IHNob3J0bmFtZSB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}